{"noir_version":"0.26.0+425566d21af1be0580432962b7065cb172e5eb16","name":"PrivateVoting","functions":[{"name":"cast_vote","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"candidate","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"candidate":[{"start":30,"end":31}],"inputs":[{"start":0,"end":30}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446]},"bytecode":"","debug_symbols":"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"},{"name":"end_vote","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231]},"bytecode":"","debug_symbols":"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rnnANQ+45gHXPOCaB1zzgGuecM0TrnnCNU+45gnXPOGaJ1zzhGuecM0TrnnBNS+45gXXvOCaF1zzgmtecM0LrnnBNS+45g3XvOGaN1zzhmvecM0brnnDNW+45g3XvOGaL7jmC675gmu+4JovuOYLrvmCa77gmi+45guu+YZrvuGab7jmG675hmu+4ZpvuOYbrvmGa77hmh+45geu+YFrfuCaH7jmB675gWt+4JofuOawD2ewD2ewD2ewD2ewD/fp9RW+ouArGr5iwVds+Aq45rl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APl7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7APV7AP17AP17AP17AP17AP17AP17AP17AP17AP17AP17AP17AP17AP17AP17AP17AP14AP95c/fezT3yH8+sFPvsvnj/pjn+/eo3dfo3ffo3c/k3cHPMb33N1G7+6jd4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/vzq89Q/3aM9SvPUP92jPUrz1D49ozNK49Q+PaMzSuPUO/aubD9935tWdoXHuGxrVnaFx7hsa1Z2hee4bmtWdoXnuG5rVn6FfNYvm+O7/2DM1rz9C89gzNa8/QvPYMrWvP0Lr2DK1rz9C69gz9qhlJ33fn156hde0ZWteeoXXtGVrXnqF97Rna156hfe0Z2teeoV85F+t77vzaM7SvPUP72jO0rz1D+9ozdF17hq5rz9B17Rm6rj1Dv3Ju0vfc+bVn6Lr2DNWdU/Tmzq89Q3XnFL2182vnFOW1c4ry2jlFee2corx2TlFeO6cor51TlNfOKcpr5xTltXOK8to5RXntnKK8dk5RXjunKK+dU5TXzinKa+cU5bVzivLaOUV57ZyiunZOUV07p6iunVNU184pqufWM7SunVNU184pqmvnFNW1c4rq2jlFde2corp2TlFdO6eorp1TVNfOKapr5xTVtXOK6to5RXXtnKK6dk5RXTunqK6dU1TXzimqa+cU1bVziuraOUV17ZyiunZOUV07p6iunVNU184pqmvnFNW1c4rq2jlFde2corp2TlFdO6eorp1TVNfOKapr5xTVtXOK6to5RXXtnKK6dk5RXTunqK6dU1TXzimqa+cU1bVziuraOUV17ZyiunZOUV07p6iunVNU184pqmvnFNW1c4rq2jlFde2corp2TlFdO6eorp1TVNfOKapr5xTVtXOK6to5RXXtnKK6dk5RXTunqK6dU1TXzimqa+cU1bVziuraOUV17ZyiunZOUV07p6iunVNU184pqmvnFNW1c4rq2jlFde2corp2TlFdO6eorp1TVNfOKapr5xTVtXOK6to5RXXtnKK6dk5RXTunqK6dU1TXzimqa+cU1bVziuraOUV17ZyiunZOUV87p6ivnVPU184p6mvnFPVz6xna184p6mvnFPW1c4r62jlFfe2cor52TlFfO6eor51T1NfOKepr5xT1tXOK+to5RX3tnKK+dk5RXzunqK+dU9TXzinqa+cU9bVzivraOUV97ZyivnZOUV87p6ivnVPU184p6mvnFPW1c4r62jlFfe2cor52TlFfO6eor51T1NfOKepr5xT1tXOK+to5RX3tnKK+dk5RXzunqK+dU9TXzinqa+cU9bVzivraOUV97ZyivnZOUV87p6ivnVPU184p6mvnFPW1c4r62jlFfe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"},{"name":"view_vote","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"candidate","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"candidate":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1]},"bytecode":"H4sIAAAAAAAA/81X20rDQBDdTdJLmt58FBT2C8qm+KAgEh991S+IJBWhbSBJUX++mLQzeFxCQLrBDqQzOzudOXN2s91KcRRJTy0u2Cjsi0jr0yS0mEtLA+cT2UPwR7bq3ehlv07i/eaFJagehwcUM6iePsxL8nPcBfgkYO/Zxq71sq7vGpjNHiKwe4DHs48n7KhPPQTO9xb5k7SeyJVrcDWFmD7wN+iAPwl1OTePud5fMTtngBn3hRJ298XQfk/LWZXDB16HBr/Y14hsi/tSC6rPNbneCOqOyZbC7tkbUC6PcjOOMfg55pr0XBz3nGjgx7e/PmHbGcf1EI88AzyBaP598Q3O8DcH5x5gfkK2Az7u123IPQEfr9204bvI0wR6icjWp8mBJ6wVwXgCWhoY/xvPoAFPV2cprw/n5vGgWy4OZ+mso57mlKtHeRk/1/Mg5o70nNaE/YzLb1kfjg0aeMP3iud84pPfGYtneIh3lshi3kD83N1Y2s4fvLN0cDcLR8BnUWZ5/JY+p3EiAZpnwESN0PcwdsCPttvg24MOoGWuW/t4G/TA5xgU4XWa433R8BcqIq1Pk8O7wQXb/qdJAItxV6TvSb8c+VfFOiuVVtvqM16vs480WSicK9RmV5SqKOO8VKs826hwgXlvSV+Sfszz+Eu9b5P0U2W7UmUr9ZrttkkhvgElFMvldg4AAA==","debug_symbols":"1dnNaoNAFAXgd5m1lLkz92fGVyld2DaFQDAhsYUSfPdGooaSgK394bhz8FznQ/C4mKPbbJ+qZr2tD648On+nrrw/usOuqrv1oan2jStJKBZuVT93l+zbwr2sNytXsrXFVTiP2aw6RsnnG1nOyfdh8cxjOnhrH4oTx7A4CYuTsTjkwTwE5glgngjmYTCPgHnAypnA2pnA6pnA+jmA9XMA6+cA1s/h5/1MnmkI+5wmRANn4qFq2gc1x8sjiXo2L5Mty2TrMtm2THZaJvsLfyKbYBPJECbWT3tcp6OFPsx08Vg+c6LH4hAWJ2BxIhaHsTiCxVEsjmFxEhYHq5UZq5UZq5UZq5UZq5UZq5UZq5UZq5UZq5UZq5UZq5Xlb1v5vAf9wx6/0Z+i4x6WJl4rZR7TWeSSztKLIpyI4UQCJ1I4kcGJEppIb379Qa2fip6vmk/jjBmeMSMzZnTGjH1v5rR4q/br6nGz6g7nu3uv9dNwVn9aNu+78532Aw=="},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(initializer)","aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"admin":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232]},"bytecode":"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","debug_symbols":""},{"name":"add_to_votes_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"candidate","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"candidate":[{"start":34,"end":35}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232]},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"H4sIAAAAAAAA/+2YzW7CMAyA0xL6B+3+2PiZtPW4YytxmHbqQ+wFEKs0LjDRbo8/rYZYNWHsMvdgCUtR0jQ4n+2SOHHUXu6b4ph2ryl9dSz4vjB19j/JGXVlXXI6QjhdIZw9Rk5gG6luv1PdgV+5GfsCGD0BjL4AxkAAYyiAMRLAOBDAOBTAGAtgTAQwXghgvBTAeCWA8VoA440AxpEAxlsBjHcCGMeMjA5h1KY9acq0KTO1P7O/mP5AtVJwMczzJeTsOPlEHQrkJi4+6Lavh9ykD/ld0od3DD3d2uCx25DNQa/PrdfkZuh3j/jEs2ICc89In2a3MX8OiD/Z9Gad+W73baN/8Ozqk2f0VWjajHcwOZ3bMSUkcyoTI2xPyVgch/5wSYxBIM/E+Id//E5bv0vIGO8X+wvFa79v8fgWc98wgUCuMtGtX2w2zvsx0Bvx6z2IubZiEpF+HPNo6kvTN+SPw5yuH4rYTKUg7SHx/YCfJ+/Izl1MY6PrW/GuIYnlq8DyVULGxMR/SQf+c8i8qJtygJyZz8ynmAfq8D+OffQ91q5lC827cHyojtcTVoNwQpoYOgYO3sGCChsJbGi+ajeNiBgbG2C4WIDFFjYbOHjCwQ4OTnAwgcR/TOY4lQzThBnlwdRPpn59X1XpcrOut4tlnb5tyipdb+r0syrTj+3qa1GX8FxW6ge2C+5aGhsAAA==","debug_symbols":"ndBNCoAgFATgu8xaQvrPq0SLVxkIYpEWhHj3lOgAtXvzhm8zHnqdyKnVWAgPnuU1RO9hNzLpYR3tDiJvKwZp5nh1PDAsSkuIsgkDS6b5YdofpvtuCv7NxHDSrmjUMi2SusNM70Axumt7mnAD"}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"PrivateVoting::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateVoting::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"PrivateVoting::cast_vote_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateVoting::cast_vote_parameters","fields":[{"name":"candidate","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"PrivateVoting::end_vote_abi","fields":[]},{"kind":"struct","path":"PrivateVoting::add_to_votes_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateVoting::add_to_votes_public_parameters","fields":[{"name":"candidate","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<AztecAddress>"}}]}},{"name":"votes","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"2"}},{"name":"typ","value":{"kind":"string","value":"Map<Field, PublicMutable<Field>>"}}]}},{"name":"voteEnded","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"3"}},{"name":"typ","value":{"kind":"string","value":"PublicMutable<bool>"}}]}}]}]}},"file_map":{"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(sha256)]\n// docs:start:sha256_slice\npub fn sha256_slice(input: [u8]) -> [u8; 32]\n// docs:end:sha256_slice\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s_slice\npub fn blake2s_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake2s_slice\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3_slice\npub fn blake3_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake3_slice\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n// docs:start:pedersen_commitment_slice\npub fn pedersen_commitment_slice(input: [Field]) -> PedersenPoint {\n    pedersen_commitment_with_separator_slice(input, 0)\n}\n// docs:end:pedersen_commitment_slice\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator_slice(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n// docs:start:pedersen_hash_slice\npub fn pedersen_hash_slice(input: [Field]) -> Field\n// docs:end:pedersen_hash_slice\n{\n    pedersen_hash_with_separator_slice(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator_slice(input: [Field], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut inputs_as_bytes = &[];\n\n    for input in inputs {\n        let input_bytes = input.to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s_slice(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(keccak256)]\n// docs:start:keccak256_slice\npub fn keccak256_slice(input: [u8], message_size: u32) -> [u8; 32]\n// docs:end:keccak256_slice\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"contract PrivateVoting {\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable, FunctionSelector};\n    use dep::aztec::context::Context;\n\n    #[aztec(storage)]\n    struct Storage {\n      admin: PublicMutable<AztecAddress>,\n      votes: Map<Field, PublicMutable<Field>>,\n      voteEnded: PublicMutable<bool>\n  }\n\n    #[aztec(initializer)]\n    #[aztec(public)]\n    fn constructor(admin: AztecAddress) {\n        storage.admin.write(admin);\n        storage.voteEnded.write(false);\n    }\n\n    #[aztec(public)]\n    fn add_to_votes_public(candidate: Field) {\n        let new_vote = storage.votes.at(candidate).read() + 1;\n        storage.votes.at(candidate).write(new_vote);\n    }\n\n    #[aztec(private)]\n    fn cast_vote(candidate: Field) {\n        // assert(storage.voteEnded.read().eq(false), \"voting already ended\");\n\n        let secret = context.request_nullifier_secret_key(context.msg_sender());\n\n        let nullifier = dep::std::hash::pedersen_hash([context.msg_sender().to_field(), secret.low, secret.high]);\n        context.push_new_nullifier(nullifier, 0);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"add_to_votes_public(Field)\"),\n            [candidate]\n        );\n    }\n\n    #[aztec(public)]\n    fn end_vote() {\n        assert(storage.admin.read().eq(context.msg_sender()), \"only admins can end vote\");\n        storage.voteEnded.write(true);\n    }\n\n    unconstrained fn view_vote(candidate: Field) -> pub Field {\n        storage.votes.at(candidate).read()\n    }\n}\n","path":"/Users/satyam/web3/noir/aztec-alpha/1-private-voting/contracts/src/main.nr"},"65":{"source":"use crate::{\n    context::{\n    inputs::PublicContextInputs, interface::ContextInterface, interface::PublicContextInterface,\n    gas::GasOpts\n},\n    messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal}, hash::hash_args_array\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest}, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: Field,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            revert_code: 0\n        };\n        pub_circuit_pub_inputs\n    }\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PublicContextInterface for PublicContext {\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> u64 {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // We can consume message with a secret in public context because the message cannot be modified and therefore\n    // there is no front-running risk (e.g. somebody could front run you to claim your tokens to your address).\n    fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"67":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    hash::hash_args_array,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            max_block_number: MaxBlockNumber::default(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = 0;\n        let unencrypted_logs_hash = 0;\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn request_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: 0,\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                revert_code: 0\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"76":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"77":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"79":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"85":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"86":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nfn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"87":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"94":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm_context;\nmod interface;\nmod gas;\n\nuse interface::ContextInterface;\nuse private_context::PrivateContext;\nuse public_context::PublicContext;\nuse avm_context::AvmContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    avm: Option<&mut AvmContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), avm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), avm: Option::none() }\n    }\n\n    pub fn avm(context: &mut AvmContext) -> Context {\n        Context { avm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), avm: Option::none() }\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/context.nr"},"101":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::{PrivateContext, ContextInterface},\n    oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion<TContext>(\n    nullifier: Field,\n    context: TContext\n) where TContext: ContextInterface {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"102":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, AvmContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n    history::nullifier_inclusion::prove_nullifier_inclusion\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_avm(context: &mut AvmContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    mark_as_initialized(context);\n}\n\nfn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\npub fn assert_is_initialized_avm(context: &mut AvmContext) {\n    // WARNING: the AVM always expects UNSILOED nullifiers!\n    // TODO(fcarreiro@): Change current private/public to take unsiloed nullifiers and an address.\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier));\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\npub fn assert_initialization_matches_address_preimage_avm(context: AvmContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\nfn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"103":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET, GENERATOR_INDEX__NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, silo_nullifier}\n};\n\nuse dep::protocol_types::hash::sha256_to_field;\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"109":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"111":{"source":"use crate::context::Context;\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"127":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context: CallContext = dep::std::unsafe::zeroed();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1: CallContext = dep::std::unsafe::zeroed();\n    let mut context2: CallContext = dep::std::unsafe::zeroed();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1: CallContext = dep::std::unsafe::zeroed();\n    let mut context2: CallContext = dep::std::unsafe::zeroed();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"128":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read() as Field,\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x0f1eb4e352e8dab6cbab3c63b6d8f3cd2cd90cc7ae5ff142e4dfa2b3e28e01c1;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"135":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"136":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x141bbf6bc30f0a19640983354528288239b68edd5c1edd9955a007801230d7b6;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x05e9e448563aa811c209cc557136ac56b55f9f2f31ee54d41b697389fd45dc1c;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"143":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"148":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"190":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"194":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"195":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"199":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"200":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"201":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"203":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"204":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"205":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"207":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS,\n    GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__NOTE_HASH_NONCE,\n    GENERATOR_INDEX__UNIQUE_NOTE_HASH\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn compute_logs_hash(previous_log_hash: Field, current_log_hash: Field) -> Field {\n    accumulate_sha256(\n        [\n        previous_log_hash,\n        current_log_hash\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"}}}