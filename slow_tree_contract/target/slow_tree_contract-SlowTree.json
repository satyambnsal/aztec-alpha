{"noir_version":"0.26.0+425566d21af1be0580432962b7065cb172e5eb16","name":"SlowTree","functions":[{"name":"un_read_root","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"address":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"struct","path":"slow_updates_tree::leaf::Leaf","fields":[{"name":"next_change","type":{"kind":"field"}},{"name":"before","type":{"kind":"field"}},{"name":"after","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1,2,3]},"bytecode":"H4sIAAAAAAAA/81YQW/aMBS2SSCElAJtL7ts/gWVQ3vadkh32q7deYdM0GkSJVIStO3Po5HwnvrFclFbbLWW2uc8P3/ve5+NHZBi34Ldn7T0sbEvI6uPa6lDLB1YePagnh/UH0Jc5ir/tb4eNCBhNz+3BLhwTARcmnEZdjm3c8IH/uwLwg6MmMHcAGrsu65R63kCObiZtWbQ7wOf0D2f1FOdusEdENbWId9Gq8jQKjC0OoWYAegXedBPQl7G5mfO91zOvTfAGfeFEm73xdB9TfPJDiMW3c+veKSuEfUd7kstKD/n5HwjyHtCfekwb4OVEFZI2MzjBPwc84HsVOz3nLDoE7tfn/TQGcf5kI98A3wSYb+HYkMzvJtw7BbGx9THu4nrDSzYY/Dx2p1a5qJOY6glo74+rrU6Ya4MnsdgpcHxtflEFj6+zlJeH8bm58ivFu1ZOnGPe9XUNCWsPuEyf84XQswnslNaE/Yzr/jA+kxBIw+1tO83M08anRkaMf8ZaMQxXwyN2G9qNAGNWJsz0MhDLfMG99yTRheGRsz/HDTimG+GRuw3NZqBRqwNx+J5iedzDNjsuzD0xXM8AcvnM94LoZG3GRtCrMN3iyt8l84c4mId3A7di/gu7eE7QzoC3au6KPNfy9tlvpBAjekGBl0putS3ENMDP/Zt41uwCZTMeRsfb6s++HqGRLhtOD4Wlp8EMrL6uNbeQ6YowlKsJLIBFIXx78l+Jvt9vw6qWhW10mq9+5+vVsWf5eJS4Vil7jdVrao6L2t1Vxb3Kr1E3I9k35G9Kcv8n/q9Xiz/qmJTq+JO/Sw260WFk25eMunrUyeJ/9zGf8a4EQAA","debug_symbols":"1drbaoNAFIXhd5lrKbMPc/JVSi9smkIgmJDYQgm+ew1R0xKp1DayvIu4Z+bDwB8Cnsx2tyqqza48mvxk7EM0+ePJHPdFeb4+VsWhMrnTFDOzLl+aj060zszrZrs2uaY6uxlOJO1s8r4fJaKB2WZf221s9box21Q/ZQ0nYXHIgnkIzMNgHgHzKJjHgXk8mCeAecDyTGB9ZrA+M1ifGazPDNZnBusz/73PZJXaYbIpjog6jv1500jdnpGvWzJzy/bLZIdlsuMy2WmRbLHLZI//EqkfY1vXs8V/O+N2WgK3w0rSz0ZqOYzFESyOYnEcFsdjcQIWJ2JxEhRHLRYHq8qKVWXFqrJiVVmxqqxYVVasKitWlRWryg6ryg6ryu6+Vb6cITOc8R/9VN+fEWjssabUP1b+Mts9Vwfm8WCeAOaJYJ6E5fEWzEMze5T7jIob8DCYR8A8CuZxYB4P5glgnrn7rKqdx4UBT8LyBAvmITAPg3kEzKNYnjj4fbEP7SKxevNfJsqENTphjZuwxk9YE363prl4Lw6b4nm7Pr9wd773Vq669++ay+pjf7lTfwI="},{"name":"update_at_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"p","type":{"kind":"struct","path":"slow_updates_tree::slow_update_proof::SlowUpdateProof","fields":[{"name":"index","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}},{"name":"before","type":{"kind":"struct","path":"slow_updates_tree::slow_update_proof::SlowUpdateInner","fields":[{"name":"value","type":{"kind":"field"}},{"name":"sibling_path","type":{"kind":"array","length":254,"type":{"kind":"field"}}}]}},{"name":"after","type":{"kind":"struct","path":"slow_updates_tree::slow_update_proof::SlowUpdateInner","fields":[{"name":"value","type":{"kind":"field"}},{"name":"sibling_path","type":{"kind":"array","length":254,"type":{"kind":"field"}}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"p":[{"start":34,"end":546}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743]},"bytecode":"","debug_symbols":""},{"name":"_assert_current_root","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"caller","type":{"kind":"field"},"visibility":"private"},{"name":"expected","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"caller":[{"start":34,"end":35}],"expected":[{"start":35,"end":36}],"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233]},"bytecode":"","debug_symbols":"1Z3dzqVHkWbvxcdo9GbGP7cymgOmh5GQELQaZqQR4t7npdtfGdTlrkrserzyCAF77wycxJN2eK3wX777/R//5Td//t0f//Cn7379l++e/7bX/u7X//0v3/3pX3/zh7/9J3/682/+7c/f/fr51Xe//cP/ev/1r7/67n//7ve//e7XPn/9H7/69y/Y6Rf89Atx+oU8/UKdfqG/+gu/+k8f2/vJ7z+5t/mnD68nPn5+vunP7+fb/vz6tj+/v+3P27f9ef+2Px/f9ufz2/58fduf/7Zdu79t19q37Vr7tl1r37Zr7dt2rX3brrVv27X2bbvWvm3X2rftWvu2Xevftmv923at/6Sufezjk/uJ/Q8//5lP55qPT+d+PleMkYpxUjFBKiZJxRSpmCYVM6Bi4iEVs0jFkBI4SAkcpAQOUgIHKYGDlMBBSuAgJXCSEjhJCZykBE5SAicpgZOUwElK4CQlcJISOEkJXKQELlICFymBi5TARUrgIiVwkRK4SAlcpAQuUgI3KYGblMBNSuAmJXCTErhJCdykBG5SAjcpgZuUwENK4CEl8JASeEgJPKQEHlICDymBh5TAQ0rgASWwPaAEtgeUwPaAEtgeUALbA0pge0AJbA8oge0BJbA9oAS2h5TAi5TAi5TAi5TAi5TAi5TAi5TAi5TAi5TAi5TAi5TAm5TAm5TAm5TAm5TAm5TAm5TAm5TAm5TAm5TAm5TARkpgIyWwkRLYSAlspAQ2UgIbKYGNlMBGSmAjJbCTEthJCUxy4ozkxBnJiTOSE2ckJ85ITpyRnDgjOXFGcuKM5MQZyYkzkhNnJCfOSE6ckZw4IzlxRnLijOTEGcmJM5ITZyQnzkhOnJGcOCM5cUZy4ozkxBnJiTOSE2ckJ85ITpyRnDgjOXFGcuKM5MQZyYkzkhNnJCfOSE6ckZw4IzlxRnLijOTEGcmJM5ITZyQnzkhOnJGcOCM5cUZy4ozkxBnJiTOSE2ckJ85ITpyRnDgjOXFGcuKM5MQ5yYlzkhPnJCfOSU6cP6AEdpIT5yQnzklOnJOcOCc5cU5y4pzkxDnJiXOSE+ckJ85JTpyTnDgnOXFOcuKc5MQ5yYlzkhPnJCfOSU6ck5w4JzlxTnLinOTEOcmJc5IT5yQnzklOnJOcOCc5cU5y4pzkxDnJiXOSE+ckJ85JTpyTnDgnOXFOcuKc5MQ5yYlzkhPnJCfOSU6ck5w4JzlxTnLinOTEOcmJc5IT5yQnzklOnJOcOCc5cU5y4pzkxDnJiXOSE+ckJ85JTpyTnDgnOXFOcuKc5MQ5yYlzkhPnJCfOSU6ck5w4JzlxTnLinOTEOcmJc5IT5yQnzklOnJOcOCc5cU5y4pzkxDnJiXOSE+ckJ85JTpyTnDgnOXFOcuKc5MQ5yYlzkhPnJCfOSU6ck5w4JzlxTnLinOTEBcmJC5ITFyQnLkhOXDygBA6SExckJy5ITlyQnLggOXFBcuKC5MSFVLbK/FRM1+eKSVIxuv8D2+76/tNmj32mGKFS9BXFLFIxm1SMkYpxXTFm+amYyS98+v1LhY/ffv88xz99ej/zUXrcW3reW/rXJ95/fOFAs/n+C+v0C/v0C3b6BT/9Qpx+IU+/UKdf6NMvnN60n960n960n960n960n960n960n960n960n960n950nN50nN50nN50nN50nN50nN50nN50nN50nN50nN50nt50nt50nt50nt50nt50nt50nt50nt50nt50nt50nd50nd50nd50nd50nd50nd50nd50nd50nd50nd50n950n950n950n950n950n950n950n950n950n970nN70nN70nN70nN70nN70nN70nN70nN70nN70HN50Ps/pF9bpF/bpF+z0C376hTj9Qp5+oU6/0KdfOL3pdXrT6/Sm1+lNr9ObXqc3vU5vep3e9Dq96XV60+v0pvfpTe/Tm96nN71Pb3qf3vQ+vel9etP79Kb36U2fzsjydEaWpzOyPJ2R5emMLE9nZHk6I8vTGVmezsjydEaWpzOyPJ2R5emMLE9nZHk6I8vTGVmezsjydEaWpzOyPJ2R5emMLE9nZHk6I8vTGVmezsjydEaWpzOyPJ2R5emMLE9nZHk6I8vTGVmezsjydEaWpzOyPJ2R5emMLE9nZHk6I8vTGVmezsjydEaWpzOyPJ2R5emMLE9nZHk6I8vTGVmezsjydEaWpzOyPJ2R5emMLE9nZHk6I8vTGVmezsjydEaWpzOyPJ2R5emMLE9nZHk6I8vTGVmezsjydEaWpzOyPJ2R5emMLE9nZHk6I6vTGVmdzsjqdEZWpzOyOp2R1emMrE5nZHU6I6vTGVmdzsjqdEZWpzOyOp2R1emMrE5nZHU6I6vTGVmdzsjqdEZWpzOyOp2R1emMrE5n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7ld33/3q7rtf3X33q2t3v7p296trd7+6dvera3e/unb3q2t3v7p296trd7+6dver63e/un73q+t3v7p+96vrd7+6fver63e/un73q+t3v7p+96sbd7+6cferG3e/unH3q/sVe4bQ5d/96sbdr27c/erG3a9u3P3q5t2vbt796ubdr27e/ep+xaYodPl3v7p596ubd7+6eferm3e/unfvptp376bad++m2nfvptp376bad++m2nfvptp376bad++m2nfvptp376bad++m2nfvptp376bad++m2nfvptp376bad++m2nfvptp376bad++m2nfvptp376bad++m2nfvptp376bad++m2nfvptp376bad++msrt3U9ndu6ns7t1UdvduKnuufnXt7t1UdvduKrt7N5XdvZvK7t5NZXfvprK7d1PZ3bup7O7dVHb3biq7ezeV3b2byu7eTWV376ayu3dT2d27qezu3VR2924qu3s3ld29m8ru3k1ld++msrt3U9ndu6ns7t1UdvduKrt7N5XdvZvK7t5NZXfvprK7d1PZ3bup7O7dVHb3biq7ezeV3b2byu7eTWV376ayu3dT2d27qezu3VR2924qu3s3ld29m8ru3k1ld++msrt3U9ndu6ns7t1UdvduKrt7N5XdvZvK7t5NZXfvprK7d1PZ3bup7O7dVHb3biq7ezeV3b2byu7eTWV376ayu3dT2d27qezu3VR2924qu3s3ld29m8ru3k1ld++msrt3U9ndu6ns7t1UdvduKrt7N5XdvZvK7t5NZXfvprK7d1PZ3bup7O7dVHb3biq7ezeV3b2byu7eTWV376ayu3dT2d27qezu3VR2924qu3s3ld29m8ru3k1ld++msrt3U/ndu6n87t1UfvduKr97N5U/V7+6fvduKr97N5XfvZvK795N5XfvpvK7d1P53bup/O7dVH73biq/ezeV372byu/eTeV376byu3dT+d27qfzu3VR+924qv3s3ld+9m8rv3k3ld++m8rt3U/ndu6n87t1UfvduKr97N5XfvZvK795N5XfvpvK7d1P53bup/O7dVH73biq/ezeV372byu/eTeV376byu3dT+d27qfzu3VR+924qv3s3ld+9m8rv3k3ld++m8rt3U/ndu6n87t1UfvduKr97N5XfvZvK795N5XfvpvK7d1P53bup/O7d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"},{"name":"_update","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"caller","type":{"kind":"field"},"visibility":"private"},{"name":"index","type":{"kind":"field"},"visibility":"private"},{"name":"new_value","type":{"kind":"field"},"visibility":"private"},{"name":"before","type":{"kind":"field"},"visibility":"private"},{"name":"after","type":{"kind":"field"},"visibility":"private"},{"name":"new_root","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"after":[{"start":38,"end":39}],"before":[{"start":37,"end":38}],"caller":[{"start":34,"end":35}],"index":[{"start":35,"end":36}],"inputs":[{"start":0,"end":34}],"new_root":[{"start":39,"end":40}],"new_value":[{"start":36,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237]},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"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","debug_symbols":"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"},{"name":"un_read_leaf_at","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"key","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"address":[{"start":0,"end":1}],"key":[{"start":1,"end":2}]},"return_type":{"abi_type":{"kind":"struct","path":"slow_updates_tree::leaf::Leaf","fields":[{"name":"next_change","type":{"kind":"field"}},{"name":"before","type":{"kind":"field"}},{"name":"after","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[2,3,4]},"bytecode":"H4sIAAAAAAAA/81XS2/bMAyWbOfhOHEeTdruNP2Cwkm22w7edTutu2xHF0mHAUkM2A62/flgsUuuXxWv6EMCLMARTVHkx4+KLElx17zjI0l2j48jThuPx9RHr2tzg74imzilQZwu4HSAb67BluQu2MWm4r+L3rc5kDitcYA6717H+CTpOsfHxzmav2qO9zC3Uud5D1yLMcx1Ie+26byjaBFAXG5Se49BbgOelnk8c0t5RqXfDvk6CLP/AX1NehpXIdh0gL+uBf4kxGXfWLOyPRez0wDMuC6UMLsufPM5LYbkl3n1NX4xr4Bkg+uy2vd75KsF8QKIOyDZ5D5e+uqTL/52Mo4B6PtQy7KNCFNooRYBYBCQM7YY5BA46pvHM7eUZ8X9UMupp+UUgg2uwaGFPCXEZd/8PoQ6PAez2wDMlmL/2zN6Wjzck4WGD9eqrb1ZaHwIiKnjkQ3AE4jT/3dQgxfPdfh9voHxMcl4hpuQ7Nb4HoNuRPKkZi7yNIZcYpKj17WKJ4wVwzvHGwCOSUPwhDV4LOyVFR6uD/vm99AuF9WZ48y832WZ05R8tcgv4+d4Hth8pn5ENWE94+o+Up8pcGQhl+obObPE0bnGEeOfAUdsc61xxHqdozPgiLk5B44s5LIo/V5Y4uhS44jxXwBHbPNd44j1Okcz4Ii5YVvcL3F/5rlT0F1q/OI+PgIdnhVY52lxfRpnW4Nn8KWlu+yyaXf2nri/V+RFmiU/1tfrZCUBGsN1Qcc9Qj+AjQN6lOvGD9AHkDLHLXV89W6BztEowmXD9r44pdfod6guIfmfhF1Kyquxe0v9B+q/3tVC5Zu0UJHaHX+TzSb9tV5dKRzL1XafFyovkqxQt1m6VfMr9PuJ+jfUf8yy5I/6uVutf6t0X6j0Vt2k+90qx0lfXjLp21Mnib89zEwSoBUAAA==","debug_symbols":"1dvRasJAEIXhd9lrKTOzs7M7vkrpRdpaEMSWagtFfPcaTKLFoGhVTu4Mmc1+RPgloqswe3+pltP3+SKMV4EePIwfV2HxUc3r48Wy+lyGcYopj8Jk/lq/9LgehbfpbBLG6uvRwbBzbGbdrBtl5p5Z9ULthUm1mxby9dNow2EC8zCYR8A8EcyjYJ4E5jEwTwbzFDAPWJ8FrM8C1mcB67OA9VnA+ixgfZb/95lJuRlm8nJC1HLo+EULt9cssrukiDTsPEx2GSbbB8mONEw2D5N98pNI692P7SCUtRkW5vhnj77prm2b6Z0oUgOKaCBFAyU0kKGBMhqooIEcDKSEBmI0EFqpFa3UilZqRSu1opVar1BqjtZtkekEKGZphnUPX7jhFCyOQ3ESYXEYiyNYnIjFUSxOwuIYFgerygmrygmryoZVZcOqsmFV2bCqbFhVNqwqG1aVDavKdtsqb/fw2++Rr9HP3VOOUDp1W9272yp7s819zQzmETBPBPMomCeBeQzMk+/sUekyGlOPp4B5HMtTCMzDYB4B80Qwz737rNp+Qaop93gSmMfAPBnMU8A8juVxAvP0vl9iLSeSHjzLuJ+/hokuWcSXLJJLFsXzFm0OvqvPafU8m9Q/+q/Pfc1f2v8AbA6XPx/bM+tf"},{"name":"read_at_pub","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"key","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"key":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232]},"bytecode":"","debug_symbols":""},{"name":"update_at_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"index","type":{"kind":"field"},"visibility":"private"},{"name":"new_value","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"index":[{"start":30,"end":31}],"inputs":[{"start":0,"end":30}],"new_value":[{"start":31,"end":32}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621]},"bytecode":"","debug_symbols":"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SXGppLhUUimqpGxVUrYqKVuVr1NUSXGppLhUUlyqqBRVUbaqKFtVlK2qT72dkKK4VFFcqiguVVSKqihbVZStKspW1esUVVFcqiguVRSXKipFVZStKspWFWWr6nWKqiguVRSXKopLFZWiKspWFWWrirJV9TpFVRSXKopLFcWlikpRFWWrirJVRdmqep2iKopLFcWliuJSRaWoirJVRdmqomxVvU5RFcWliuJSRXGpolJURdmqomxVUbaqXqeoiuJSRXGporhUUSmqomxVUbaqKFtVr1NURXGporhUUVyqqBRVUbaqKFtVlK2q1ymqorhUUVyqKC5VVIqqKFtVlK0qylbV6xRVUVyqKC5VFJcqKkVVlK0qylYVZavqdYqqKC5VFJcqiksVlaIqylYVZauKslX1OkVVFJcqiksVxaWKSlEVZauKslVF2ar5OkU1KS41KS41KS41P9K8TspWTcpWTcpWzdcpqklxqUlxqUlxqUmlqCZlqyZlqyZlq+brFNWkuNSkuNSkuNSkUlSTslWTslWTslXzdYpqUlxqUlxqUlxqUimqSdmqSdmqSdmq+TpFNSkuNSkuNSkuNakU1aRs1aRs1aRs1XydopoUl5oUl5oUl5pUimpStmpStmpStmq+TlFNiktNiktNiktNKkU1KVs1KVs1KVs1X6eoJsWlJsWlJsWlJpWimpStmpStmpStmq9TVJPiUpPiUpPiUpNKUU3KVk3KVk3KVs3XKapJcalJcalJcalJpagmZasmZasmZavm6xTVpLjUpLjUpLjUpFJUk7JVk7JVk7JV83WKalJcalJcalJcalIpqknZqknZqknZqvk6RTUpLjUpLjUpLrWoFNWibNWibNWibNX61NsJWRSXWhSXWhSXWlSKalG2alG2alG2ar1OUS2KSy2KSy2KSy0qRbUoW7UoW7UoW7Vep6gWxaUWxaUWxaUWlaJalK1alK1alK1ar1NUi+JSi+JSi+JSi0pRLcpWLcpWLcpWrdcpqkVxqUVxqUVxqUWlqBZlqxZlqxZlq9brFNWiuNSiuNSiuNSiUlSLslWLslWLslXrdYpqUVxqUVxqUVxqUSmqRdmqRdmqRdmq9TpFtSgutSgutSgutagU1aJs1aJs1aJs1XqdoloUl1oUl1oUl1pUimpRtmpRtmpRtmq9TlEtikstikstikstKkW1KFu1KFu1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"},{"name":"read_leaf_at_pub","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"key","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}],"key":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232]},"bytecode":"","debug_symbols":"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qZdaU2+1pt5qTb3VmnqrNfVWa+qt1tRbram3WlNvtabeak1tak1tak1tak1tak1tak1tak1tak1tak1tak1tak3tak3tak3tak3tak3tak3tak3tak3tak3tak3tak0dak0dak0dak0dak0dak0dak0dak0dak0dak0dak2dak2dak2dak2dak2dak2dak2dak2dak2dak2dak1dak1dak1dak1dak1dak1dak1dak2t5ihuNUdxqzmKW81R3GqO4lZzFLeao7jVHMWt5ihuNUdxqzmKW81R3GqO4lZzFLeao7jVHMWt5ihuNUdxqzmKW81R3GqO4lZzFLeao2hqjqKpOYqm5iiamqNoj1hTm5qjaGqOoqk5iqbmKJqao2hqjqKpOYqm5iiamqNoao6iqTmKpuYompqjaGqOoqk5iqbmKJqao2hqjqKpOYqm5iiamqNoao6iqTmKpuYompqjaGqOoqk5iqbmKJqao2hqjqKpOYqm5iiamqNoao6iqTmKpuYompqjaGqOoqk5iqbmKJqao2hqjqKpOYqm5iiamqNoao6iqTmKpuYompqjaGqOoqk5iqbmKJqao2hqjqKpOYqm5iiamqNoao6iqTmKpuYompqjaGqOoqk5iqbmKJqao2hqjqKpOYqm5iiamqNoao6iqTmKpuYompqjaGqOoqk5iqbmKJqao2hqjqKpOYqm5iiamqNoao6iqTmKpuYompqjaGqOoqk5iqbmKJqao2hqjqKpOYqm5iiamqNoao6iqTmKruYoupqj6GqOoqs5iv6INbWrOYqu5ii6mqPoao6iqzmKruYoupqj6GqOoqs5iq7mKLqao+hqjqKrOYqu5ii6mqPoao6iqzmKruYoupqj6GqOoqs5iq7mKLqao+hqjqKrOYqu5ii6mqPoao6iqzmKruYoupqj6GqOoqs5iq7mKLqao+hqjqKrOYqu5ii6mqPoao6iqzmKruYoupqj6GqOoqs5iq7mKLqao+hqjqKrOYqu5ii6mqPoao6iqzmKruYoupqj6GqOoqs5iq7mKLqao+hqjqKrOYqu5ii6mqPoao6iqzmKruYoupqj6GqOoqs5iq7mKLqao+hqjqKrOYqu5ii6mqPoao6iqzmKruYoupqj6GqOoqs5iq7mKLqao+hqjqKrOYqu5ii6mqPoao6iqzmKruYoupqj6GqOoqs5iq7m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wvU5wvU5wvU5wvU5wvX548gtgdySyC2F3HKQW5DsI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1yfI1xfIFxfIFxfIFxfIFxfPI7cEsgtidxSyC0HuQXJPsL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1BcL1JcL1JcL1JcL1JcL15ePILYHcksgthdxykFuQ7CNcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyJcXyFcXyFc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"},{"name":"initialize","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":34}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231]},"bytecode":"","debug_symbols":""},{"name":"read_at","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"index","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"index":[{"start":30,"end":31}],"inputs":[{"start":0,"end":30}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"field"}},{"name":"unencrypted_logs_hash","type":{"kind":"field"}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824]},"bytecode":"","debug_symbols":""}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"SlowTree::read_at_pub_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SlowTree::read_at_pub_parameters","fields":[{"name":"key","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"SlowTree::_update_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SlowTree::_update_parameters","fields":[{"name":"caller","type":{"kind":"field"}},{"name":"index","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}},{"name":"before","type":{"kind":"field"}},{"name":"after","type":{"kind":"field"}},{"name":"new_root","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SlowTree::update_at_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SlowTree::update_at_private_parameters","fields":[{"name":"index","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SlowTree::read_at_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SlowTree::read_at_parameters","fields":[{"name":"index","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"SlowTree::_assert_current_root_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SlowTree::_assert_current_root_parameters","fields":[{"name":"caller","type":{"kind":"field"}},{"name":"expected","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SlowTree::initialize_abi","fields":[]},{"kind":"struct","path":"SlowTree::update_at_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SlowTree::update_at_public_parameters","fields":[{"name":"p","type":{"kind":"struct","path":"slow_updates_tree::slow_update_proof::SlowUpdateProof","fields":[{"name":"index","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}},{"name":"before","type":{"kind":"struct","path":"slow_updates_tree::slow_update_proof::SlowUpdateInner","fields":[{"name":"value","type":{"kind":"field"}},{"name":"sibling_path","type":{"kind":"array","length":254,"type":{"kind":"field"}}}]}},{"name":"after","type":{"kind":"struct","path":"slow_updates_tree::slow_update_proof::SlowUpdateInner","fields":[{"name":"value","type":{"kind":"field"}},{"name":"sibling_path","type":{"kind":"array","length":254,"type":{"kind":"field"}}}]}}]}}]}}]},{"kind":"struct","path":"SlowTree::read_leaf_at_pub_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SlowTree::read_leaf_at_pub_parameters","fields":[{"name":"key","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"struct","path":"slow_updates_tree::leaf::Leaf","fields":[{"name":"next_change","type":{"kind":"field"}},{"name":"before","type":{"kind":"field"}},{"name":"after","type":{"kind":"field"}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"869710811710178111116101"},{"kind":"string","value":"ValueNote"}]}],"storage":[{"kind":"struct","fields":[{"name":"trees","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"Map<Field, SlowMap<TREE_HEIGHT, UPDATE_SIZE>>"}}]}}]}]}},"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(sha256)]\n// docs:start:sha256_slice\npub fn sha256_slice(input: [u8]) -> [u8; 32]\n// docs:end:sha256_slice\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s_slice\npub fn blake2s_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake2s_slice\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3_slice\npub fn blake3_slice(input: [u8]) -> [u8; 32]\n// docs:end:blake3_slice\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n// docs:start:pedersen_commitment_slice\npub fn pedersen_commitment_slice(input: [Field]) -> PedersenPoint {\n    pedersen_commitment_with_separator_slice(input, 0)\n}\n// docs:end:pedersen_commitment_slice\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_commitment_with_separator_slice(input: [Field], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator_slice(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n// docs:start:pedersen_hash_slice\npub fn pedersen_hash_slice(input: [Field]) -> Field\n// docs:end:pedersen_hash_slice\n{\n    pedersen_hash_with_separator_slice(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator_slice(input: [Field], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut inputs_as_bytes = &[];\n\n    for input in inputs {\n        let input_bytes = input.to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s_slice(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(keccak256)]\n// docs:start:keccak256_slice\npub fn keccak256_slice(input: [u8], message_size: u32) -> [u8; 32]\n// docs:end:keccak256_slice\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, &[self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"// docs:start:pop_capsule\n#[oracle(popCapsule)]\nfn pop_capsule_oracle<N>() -> [Field; N] {}\n\n// A capsule is a \"blob\" of data that is passed to the contract through an oracle.\nunconstrained pub fn pop_capsule<N>() -> [Field; N] {\n    pop_capsule_oracle()\n}\n// docs:end:pop_capsule","path":"/Users/satyam/web3/noir/aztec-alpha/slow_tree_contract/src/capsule.nr"},"49":{"source":"mod capsule;\nmod types;\n\n// This contract allow us to \"read\" public storage in private through a delayed tree.\n// More documentation need to be outlined for this properly, but there is some in \n// https://github.com/AztecProtocol/aztec-packages/issues/1291\n// This is made as a separate contract for one thing mainly. Making it simpler to use.\n// TODO(#4760): Rename slow updates to shared mutable and ideally move the impl to state-vars in aztec-nr.\ncontract SlowTree {\n    use dep::aztec::prelude::{\n        AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteViewerOptions, PrivateContext,\n        Map, PublicMutable, PrivateSet\n    };\n\n    use dep::value_note::{balance_utils, utils::{increment, decrement}, value_note::ValueNote};\n    use dep::aztec::{context::{PublicContext, Context}, protocol_types::type_serialization::FIELD_SERIALIZED_LEN};\n    use dep::slow_updates_tree::{SlowMap, Leaf, SlowUpdateProof, compute_merkle_root, deserialize_slow_update_proof};\n\n    // docs:start:import_pop_capsule\n    use crate::capsule::pop_capsule;\n    // docs:end:import_pop_capsule\n    use crate::types::{MembershipProof, deserialize_membership_proof};\n\n    // docs:start:constants_and_storage\n    global TREE_HEIGHT: u64 = 254;\n    global MEMBERSHIP_SIZE: Field = 256; // TREE_HEIGHT + 2\n    global UPDATE_SIZE: Field = 512; // TREE_HEIGHT * 2 + 4\n\n    global EMPTY_ROOT: Field = 5785871043333994658400733180052743689641713274194136017445890613179954325976;\n\n    #[aztec(storage)]\n    struct Storage {\n        trees: Map<Field, SlowMap<TREE_HEIGHT, UPDATE_SIZE>>,\n    }\n    // docs:end:constants_and_storage\n\n    // docs:start:initialize\n    #[aztec(public)]\n    fn initialize() {\n        storage.trees.at(context.msg_sender().to_field()).initialize(EMPTY_ROOT);\n    }\n    // docs:end:initialize\n    // docs:start:read_at_pub\n    #[aztec(public)]\n    fn read_at_pub(key: Field) -> Field {\n        storage.trees.at(context.msg_sender().to_field()).read_at(key)\n    }\n    // docs:end:read_at_pub\n    #[aztec(public)]\n    fn read_leaf_at_pub(key: Field) -> Leaf {\n        storage.trees.at(context.msg_sender().to_field()).read_leaf_at(key)\n    }\n    // docs:start:read_at_private\n    #[aztec(private)]\n    fn read_at(index: Field) -> Field {\n        // docs:start:pop_capsule\n        let fields = pop_capsule();\n        // docs:end:pop_capsule\n        let p: MembershipProof<TREE_HEIGHT, MEMBERSHIP_SIZE> = deserialize_membership_proof(fields);\n        assert(index == p.index, \"Index does not match expected\");\n\n        let expected_root = compute_merkle_root(p.value, p.index, p.sibling_path);\n        let selector = FunctionSelector::from_signature(\"_assert_current_root(Field,Field)\");\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [context.msg_sender().to_field(), expected_root]\n        );\n\n        p.value\n    }\n    // docs:end:read_at_private\n    // docs:start:assert_current_root\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _assert_current_root(caller: Field, expected: Field) {\n        let root = storage.trees.at(caller).current_root();\n        assert(root == expected, \"Root does not match expected\");\n    }\n    // docs:end:assert_current_root\n\n    // docs:start:update_at_pub\n    #[aztec(public)]\n    fn update_at_public(p: SlowUpdateProof<TREE_HEIGHT, UPDATE_SIZE>) {\n        storage.trees.at(context.msg_sender().to_field()).update_at(p);\n    }\n    // docs:end:update_at_pub\n    // docs:start:update_at_private\n    #[aztec(private)]\n    fn update_at_private(index: Field, new_value: Field) {\n        let fields = pop_capsule();\n        let p: SlowUpdateProof<TREE_HEIGHT, UPDATE_SIZE> = deserialize_slow_update_proof(fields);\n        assert(index == p.index, \"Index does not match expected\");\n        assert(new_value == p.new_value, \"New value does not match expected\");\n\n        // We compute the root before.\n        let before_root = compute_merkle_root(p.before.value, p.index, p.before.sibling_path);\n        let after_root = compute_merkle_root(p.after.value, p.index, p.after.sibling_path);\n        let new_after_root = compute_merkle_root(p.new_value, p.index, p.after.sibling_path);\n\n        let selector = FunctionSelector::from_signature(\"_update(Field,Field,Field,Field,Field,Field)\");\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [\n            context.msg_sender().to_field(),\n            p.index,\n            p.new_value,\n            before_root,\n            after_root,\n            new_after_root\n        ]\n        );\n    }\n    // docs:end:update_at_private\n    // docs:start:_update\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _update(\n        caller: Field,\n        index: Field,\n        new_value: Field,\n        before: Field,\n        after: Field,\n        new_root: Field\n    ) {\n        let current_root = storage.trees.at(caller).current_root();\n        let after_root = storage.trees.at(caller).read_root().after;\n\n        assert(current_root == before, \"Before root does not match expected\");\n        assert(after_root == after, \"After root does not match expected\");\n\n        storage.trees.at(caller).update_unsafe_at(index, new_value, new_root);\n    }\n    // docs:end:_update\n    unconstrained fn un_read_leaf_at(address: AztecAddress, key: Field) -> pub Leaf {\n        storage.trees.at(address.to_field()).read_leaf_at(key)\n    }\n\n    unconstrained fn un_read_root(address: AztecAddress) -> pub Leaf {\n        storage.trees.at(address.to_field()).read_root()\n    }\n}","path":"/Users/satyam/web3/noir/aztec-alpha/slow_tree_contract/src/main.nr"},"56":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed private data tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"67":{"source":"use crate::{\n    context::{\n    inputs::PublicContextInputs, interface::ContextInterface, interface::PublicContextInterface,\n    gas::GasOpts\n},\n    messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal}, hash::hash_args_array\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest}, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: Field,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: 0,\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            revert_code: 0\n        };\n        pub_circuit_pub_inputs\n    }\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PublicContextInterface for PublicContext {\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> u64 {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // We can consume message with a secret in public context because the message cannot be modified and therefore\n    // there is no front-running risk (e.g. somebody could front run you to claim your tokens to your address).\n    fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n        _gas: GasOpts\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"69":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    hash::hash_args_array,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            max_block_number: MaxBlockNumber::default(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = 0;\n        let unencrypted_logs_hash = 0;\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn request_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: 0,\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                revert_code: 0\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"78":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"79":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"81":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"87":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"96":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm_context;\nmod interface;\nmod gas;\n\nuse interface::ContextInterface;\nuse private_context::PrivateContext;\nuse public_context::PublicContext;\nuse avm_context::AvmContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    avm: Option<&mut AvmContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), avm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), avm: Option::none() }\n    }\n\n    pub fn avm(context: &mut AvmContext) -> Context {\n        Context { avm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), avm: Option::none() }\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/context.nr"},"105":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET, GENERATOR_INDEX__NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, silo_nullifier}\n};\n\nuse dep::protocol_types::hash::sha256_to_field;\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"111":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"129":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        let serialized: [Field; CALL_CONTEXT_LENGTH] = self.serialize();\n\n        for i in 0..CALL_CONTEXT_LENGTH {\n            assert(serialized[i] == 0);\n        }\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn assert_is_zero() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    context.assert_is_zero();\n}\n\n#[test(should_fail)]\nfn not_zero_assert_is_zero() {\n    let mut context: CallContext = dep::std::unsafe::zeroed();\n    context.is_delegate_call = true;\n    context.assert_is_zero();\n}\n\n#[test]\nfn test_eq() {\n    let mut context1: CallContext = dep::std::unsafe::zeroed();\n    let mut context2: CallContext = dep::std::unsafe::zeroed();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1: CallContext = dep::std::unsafe::zeroed();\n    let mut context2: CallContext = dep::std::unsafe::zeroed();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"130":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: Field,\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    revert_code: u8,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.push(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.revert_code as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read() as Field,\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            revert_code: reader.read() as u8,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x0f1eb4e352e8dab6cbab3c63b6d8f3cd2cd90cc7ae5ff142e4dfa2b3e28e01c1;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"138":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x141bbf6bc30f0a19640983354528288239b68edd5c1edd9955a007801230d7b6;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x05e9e448563aa811c209cc557136ac56b55f9f2f31ee54d41b697389fd45dc1c;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"145":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"150":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"192":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"196":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"202":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"203":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"207":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"209":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS,\n    GENERATOR_INDEX__CONTRACT_ADDRESS, GENERATOR_INDEX__NOTE_HASH_NONCE,\n    GENERATOR_INDEX__UNIQUE_NOTE_HASH\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn compute_logs_hash(previous_log_hash: Field, current_log_hash: Field) -> Field {\n    accumulate_sha256(\n        [\n        previous_log_hash,\n        current_log_hash\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"220":{"source":"// Subset of the MembershipProof that is needed for the slow update.\nstruct SlowUpdateInner<N> {\n  value: Field, // Value only really used for the private flow though :thinking:\n  sibling_path: [Field; N],\n}\n\n// The slow update proof. Containing two merkle paths\n// One for the before and one for the after trees.\n// M = 2 * N + 4\nstruct SlowUpdateProof<N, M> {\n  index: Field,\n  new_value: Field,\n  before: SlowUpdateInner<N>,\n  after: SlowUpdateInner<N>,\n}\n\npub fn deserialize_slow_update_proof<N, M>(serialized: [Field; M]) -> SlowUpdateProof<N, M> {\n    SlowUpdateProof::deserialize(serialized)\n}\n\nimpl<N, M> SlowUpdateProof<N, M> {\n    pub fn serialize(self: Self) -> [Field; M] {\n        let mut serialized = [0; M];\n        serialized[0] = self.index;\n        serialized[1] = self.new_value;\n        serialized[2] = self.before.value;\n        serialized[3 + N] = self.after.value;\n\n        for i in 0..N {\n            serialized[3 + i] = self.before.sibling_path[i];\n            serialized[4 + N + i] = self.after.sibling_path[i];\n        }\n        serialized\n    }\n\n    pub fn deserialize(serialized: [Field; M]) -> Self {\n        let mut before_sibling_path = [0; N];\n        let mut after_sibling_path = [0; N];\n\n        for i in 0..N {\n            before_sibling_path[i] = serialized[3 + i];\n            after_sibling_path[i] = serialized[4 + N + i];\n        }\n\n        Self {\n            index: serialized[0],\n            new_value: serialized[1],\n            before: SlowUpdateInner { value: serialized[2], sibling_path: before_sibling_path },\n            after: SlowUpdateInner { value: serialized[3 + N], sibling_path: after_sibling_path }\n        }\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/slow-updates-tree/src/slow_update_proof.nr"},"221":{"source":"use dep::aztec::protocol_types::traits::{Serialize, Deserialize};\n\n// A leaf in the tree.\nstruct Leaf {\n  next_change: Field,\n  before: Field,\n  after: Field,\n}\n\nimpl Serialize<3> for Leaf {\n  fn serialize(leaf: Leaf) -> [Field; 3] {\n      [leaf.next_change, leaf.before, leaf.after]\n  }\n}\n\nimpl Deserialize<3> for Leaf {\n  fn deserialize(serialized: [Field; 3]) -> Leaf {\n      Leaf { next_change: serialized[0], before: serialized[1], after: serialized[2] }\n  }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/slow-updates-tree/src/leaf.nr"},"222":{"source":"use crate::{leaf::Leaf, slow_update_proof::SlowUpdateProof};\nuse dep::aztec::{\n    context::Context, oracle::storage::{storage_read, storage_write},\n    protocol_types::traits::{Serialize, Deserialize}\n};\nuse dep::std::hash::pedersen_hash;\nuse dep::std::merkle::compute_merkle_root;\n\n// The epoch length is just a random number for now.\nglobal EPOCH_LENGTH: u64 = 100;\n\nfn compute_next_change(time: Field) -> Field {\n    ((time as u64 / EPOCH_LENGTH + 1) * EPOCH_LENGTH) as Field\n}\n\n// TODO(#4760): Rename slow updates to shared mutable and ideally move the impl to state-vars in aztec-nr.\n// The simple slow map which stores a sparse tree\nstruct SlowMap<N,M> {\n  context: Context,\n  storage_slot: Field\n}\n\nimpl<N,M> SlowMap<N,M> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    pub fn read_root(self: Self) -> Leaf {\n        let fields = storage_read(self.storage_slot);\n        Leaf::deserialize(fields)\n    }\n\n    // Beware that the initial root could include much state that is not shown by the public storage!\n    pub fn initialize(self: Self, initial_root: Field) {\n        let mut root_object = self.read_root();\n        assert(root_object.next_change == 0, \"cannot initialize twice\");\n        root_object = Leaf {\n      next_change: 0xffffffffffffffffffffffffffffff,\n      before: initial_root,\n      after: initial_root,\n    };\n        let fields = root_object.serialize();\n        storage_write(self.storage_slot, fields);\n    }\n\n    // Reads the \"CURRENT\" value of the root\n    pub fn current_root(self: Self) -> Field {\n        let time = self.context.public.unwrap().timestamp();\n        let root_object = self.read_root();\n        if time <= root_object.next_change as u64 {\n            root_object.before\n        } else {\n            root_object.after\n        }\n    }\n\n    // docs:start:read_leaf_at\n    pub fn read_leaf_at(self: Self, key: Field) -> Leaf {\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key]);\n        let fields = storage_read(derived_storage_slot);\n        Leaf::deserialize(fields)\n    }\n    // docs:end:read_leaf_at\n\n    // docs:start:read_at\n    // Reads the \"CURRENT\" value of the leaf\n    pub fn read_at(self: Self, key: Field) -> Field {\n        let time = self.context.public.unwrap().timestamp();\n        let leaf = self.read_leaf_at(key);\n        if time <= leaf.next_change as u64 {\n            leaf.before\n        } else {\n            leaf.after\n        }\n    }\n    // docs:end:read_at\n\n    // Will update values in the \"AFTER\" tree\n    // - updates the leaf and root to follow current values, moving from after to before if \n    //  needed.\n    // - checks that the provided merkle paths match state values\n    // - update the leaf and compute the net root\n    // Should only be used when updates from public are desired, since the hashing will be\n    // costly since done by sequencer.\n    pub fn update_at(self: Self, p: SlowUpdateProof<N, M>) {\n        // The calling function should ensure that the index is within the tree.\n        // This must be done separately to ensure we are not constraining too tight here.\n\n        let time = self.context.public.unwrap().timestamp();\n        let next_change = compute_next_change(time as Field);\n\n        let mut root = self.read_root();\n        let mut leaf = self.read_leaf_at(p.index);\n\n        // Move leaf if needed\n        if time > leaf.next_change as u64 {\n            leaf.before = leaf.after;\n        }\n\n        // Move root if needed\n        if time > root.next_change as u64 {\n            root.before = root.after;\n        }\n\n        // Ensures that when before is active, it is not altered by this update\n        assert(\n            root.before == compute_merkle_root(leaf.before, p.index, p.before.sibling_path), \"Before root don't match\"\n        );\n\n        // Ensures that the provided sibling path is valid for the CURRENT \"after\" tree.\n        // Without this check, someone could provide a sibling path for a different tree\n        // and update the entire \"after\" tree at once, causing it to be out of sync with leaf storage.\n        assert(\n            root.after == compute_merkle_root(leaf.after, p.index, p.after.sibling_path), \"After root don't match\"\n        );\n\n        // Update the leaf \n        leaf.after = p.new_value;\n        leaf.next_change = next_change;\n\n        // Update the after root\n        root.after = compute_merkle_root(leaf.after, p.index, p.after.sibling_path);\n        root.next_change = next_change;\n\n        self.update_unsafe(p.index, leaf, root);\n    }\n\n    // A variation of `update_at` that skips the merkle-membership checks.\n    // To be used by a contract which has already checked the merkle-membership.\n    // This allows us to check the merkle-memberships in private and then update\n    // in public, limiting the cost of the update.\n    pub fn update_unsafe_at(self: Self, index: Field, leaf_value: Field, new_root: Field) {\n        // User must ensure that the checks from update_at is performed for safety\n        let time = self.context.public.unwrap().timestamp();\n        let next_change = compute_next_change(time as Field);\n\n        let mut root = self.read_root();\n        let mut leaf = self.read_leaf_at(index);\n\n        // Move leaf if needed\n        if time > leaf.next_change as u64 {\n            leaf.before = leaf.after;\n        }\n\n        // Move root if needed\n        if time > root.next_change as u64 {\n            root.before = root.after;\n        }\n\n        // Update the leaf \n        leaf.after = leaf_value;\n        leaf.next_change = next_change;\n\n        // Update the root\n        root.after = new_root;\n        root.next_change = next_change;\n\n        self.update_unsafe(index, leaf, root);\n    }\n\n    // Updates the value in the in storage with no checks.\n    fn update_unsafe(self: Self, index: Field, leaf: Leaf, root: Leaf) {\n        let derived_storage_slot = pedersen_hash([self.storage_slot, index]);\n        let fields = leaf.serialize();\n        storage_write(derived_storage_slot, fields);\n\n        let fields = root.serialize();\n        storage_write(self.storage_slot, fields);\n    }\n}\n\n/*pub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n    current = pedersen_hash([hash_left, hash_right]);\n    };\n    current\n}\n*/\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/slow-updates-tree/src/slow_map.nr"},"227":{"source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{unsafe_rand::unsafe_rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    log::emit_encrypted_log, hash::pedersen_hash, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.owner.to_field(), self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n","path":"/Users/satyam/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.34.0/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}